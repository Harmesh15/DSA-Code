class CircularQueue {
  constructor(size) {
    this.size = size;
    this.queue = new Array(size);
    this.front = -1;
    this.count = 0; 
  }

  enqueue(element) {
    if (this.isFull()) {
      console.log("Queue is full!");
      return;
    }
    if (this.front === -1) this.front = 0;
    let rear = (this.front + this.count) % this.size; 
    this.queue[rear] = element;
    this.count++; 
    console.log(`${element} added to the queue`);
  }

  dequeue() {
    if (this.isEmpty()) {
      console.log("Queue is empty!");
      return;
    }
    const dequeuedElement = this.queue[this.front];
    this.queue[this.front] = undefined;
    if (this.count === 1) {
      this.front = -1; 
    } else {
      this.front = (this.front + 1) % this.size; 
    }
    this.count--;
    console.log(`${dequeuedElement} removed from the queue`);
    return dequeuedElement;
  }

  peek() {
    if (this.isEmpty()) {
      console.log("Queue is empty!");
      return null;
    }
    return this.queue[this.front];
  }

  isEmpty() {
    return this.count === 0;
  }

  isFull() {
    return this.count === this.size;
  }

  printQueue() {
    if (this.isEmpty()) {
      console.log("Queue is empty!");
      return;
    }
    let elements = [];
    for (let i = 0; i < this.count; i++) {
      let index = (this.front + i) % this.size;
      elements.push(this.queue[index]);
    }
    console.log("Queue:", elements.join(" -> "));
  }
}
